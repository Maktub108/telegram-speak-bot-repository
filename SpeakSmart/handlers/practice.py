import logging
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, Optional, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from pathlib import Path

from services.database import db
from services.speech_recognition import speech_service
from services.tts_service import tts_service
from config import config

logger = logging.getLogger(__name__)
router = Router()


class PracticeStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    waiting_for_response = State()
    practicing = State()
    waiting_for_text_input = State()  # –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï: –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞


practice_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéØ –ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞"), KeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üö™ –í—ã—Ö–æ–¥")]
    ],
    resize_keyboard=True
)

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
response_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º"), KeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º")],
        [KeyboardButton(text="üö™ –í—ã—Ö–æ–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ù–û–í–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê: –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
text_input_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥")]
    ],
    resize_keyboard=True
)


@router.message(Command("practice"))
async def cmd_practice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /practice - –Ω–∞—á–∞–ª–æ —è–∑—ã–∫–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    try:
        user_id = message.from_user.id
        logger.info(f"User {user_id} started /practice")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ practicing –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.set_state(PracticeStates.practicing)
        await state.update_data(
            correct_answers=0,
            total_attempts=0,
            current_phrase=None,
            current_phrase_id=None
        )

        welcome_text = (
            "üéØ *–†–µ–∂–∏–º —è–∑—ã–∫–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏*\n\n"
            "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã, "
            "–∞ –≤—ã –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏—Ö!\n\n"
            "üìù *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
            "1. –Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ—Ä–∞–∑–æ–π\n"
            "2. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º\n"
            "3. –Ø –ø—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –æ—Ç–≤–µ—Ç –∏ –¥–∞—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–æ–π."
        )

        await message.answer(welcome_text, reply_markup=practice_keyboard)
        await message.answer("–ù–∞–∂–º–∏—Ç–µ *'üéØ –ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞'*, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!", reply_markup=practice_keyboard)

    except Exception as e:
        logger.error(f"Error in cmd_practice: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏.")
        await state.clear()


async def send_practice_phrase(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è."""
    user_id = message.from_user.id
    logger.info(f"Sending phrase to user {user_id}")

    try:
        phrase_id, phrase_text = tts_service.get_random_phrase()
        if not phrase_text:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–∑—É –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        logger.info(f"Phrase for user {user_id}: {phrase_text}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ—Ä–∞–∑—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            current_phrase=phrase_text,
            current_phrase_id=phrase_id
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Ñ—Ä–∞–∑—ã
        await message.answer(f"üìù *–§—Ä–∞–∑–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*\n`{phrase_text}`")

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        audio_path = tts_service.get_phrase_audio_path(phrase_id)
        if audio_path and audio_path.exists():
            try:
                voice = FSInputFile(audio_path)
                await message.answer_voice(
                    voice=voice,
                    caption="üéß –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —ç—Ç—É —Ñ—Ä–∞–∑—É"
                )
            except Exception as e:
                logger.error(f"Error sending voice: {e}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        else:
            logger.warning(f"Audio file not found: {audio_path}")
            await message.answer("üîá *–ê—É–¥–∏–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.* –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É —Ç–µ–∫—Å—Ç–æ–º.")

        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç–∏—Ç—å
        await message.answer(
            "*–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∞:*",
            reply_markup=response_keyboard
        )

        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        await state.set_state(PracticeStates.waiting_for_response)

    except Exception as e:
        logger.error(f"Error in send_practice_phrase: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ—Ä–∞–∑—ã.")
        await state.set_state(PracticeStates.practicing)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º"
@router.message(PracticeStates.waiting_for_response, F.text == "üé§ –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º")
async def handle_voice_prompt(message: types.Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç."""
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –æ—Ç–≤–µ—Ç–æ–º. üé§",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∞
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º"
@router.message(PracticeStates.waiting_for_response, F.text == "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º")
async def handle_text_prompt(message: types.Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç."""
    await message.answer(
        "–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —É—Å–ª—ã—à–∞–ª–∏. üí¨",
        reply_markup=text_input_keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    await state.set_state(PracticeStates.waiting_for_text_input)


# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –î–ª—è –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥"
@router.message(PracticeStates.waiting_for_text_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥")
async def handle_cancel_text_input(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ—Ç–≤–µ—Ç–∞."""
    await message.answer(
        "–¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=response_keyboard
    )
    await state.set_state(PracticeStates.waiting_for_response)


# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.message(PracticeStates.waiting_for_text_input, F.text)
async def handle_text_input_response(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞."""
    user_text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã - —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
    if user_text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥":
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—É
    await process_user_response(message, state, user_text, is_voice=False)


@router.message(PracticeStates.waiting_for_response, F.voice)
async def handle_voice_response(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        logger.info(f"User {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        await message.answer(
            "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! \n\n"
            "–î–ª—è —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "**–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ç–æ–π —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–∫–∞–∑–∞–ª–∏**. \n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–æ—á–Ω–µ–µ!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üí¨ –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è")]],
                resize_keyboard=True
            )
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await state.update_data(has_voice_response=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –î–ª—è –∫–Ω–æ–ø–∫–∏ "üí¨ –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è" –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(PracticeStates.waiting_for_response, F.text == "üí¨ –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è")
async def handle_text_after_voice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await message.answer(
        "–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–æ–∏–∑–Ω–µ—Å–ª–∏. üí¨",
        reply_markup=text_input_keyboard
    )
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    await state.set_state(PracticeStates.waiting_for_text_input)


@router.message(PracticeStates.waiting_for_response, F.text)
async def handle_text_response(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    user_text = message.text.strip()
    logger.info(f"User {user_id} sent text response: '{user_text}'")

    # –ö–æ–º–∞–Ω–¥–∞ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    if user_text in ["üö™ –í—ã—Ö–æ–¥"]:
        await handle_exit(message, state)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç
    await process_user_response(message, state, user_text, is_voice=False)


# –í—ã–Ω–µ—Å–µ–Ω–∞ –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
async def process_user_response(message: types.Message, state: FSMContext, user_response: str, is_voice: bool):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user_id = message.from_user.id
        state_data = await state.get_data()

        current_phrase = state_data.get('current_phrase')
        current_phrase_id = state_data.get('current_phrase_id')
        correct_answers = state_data.get('correct_answers', 0)
        total_attempts = state_data.get('total_attempts', 0) + 1

        if not current_phrase:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ—Ä–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=practice_keyboard)
            await state.set_state(PracticeStates.practicing)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = speech_service.check_answer(user_response, current_phrase)
        logger.info(f"Check result for user {user_id}: {is_correct}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db.add_practice_session(user_id, current_phrase_id, user_response, is_correct)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if is_correct:
            correct_answers += 1
            feedback = "‚úÖ *–û—Ç–ª–∏—á–Ω–æ!* –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n"
        else:
            feedback = "‚ùå *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!*\n"
            feedback += f"*–í–∞—à –æ—Ç–≤–µ—Ç:* {user_response}\n"
            feedback += f"*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* {current_phrase}\n\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await state.update_data(
            correct_answers=correct_answers,
            total_attempts=total_attempts
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∏–¥–±–µ–∫
        accuracy = (correct_answers / total_attempts * 100) if total_attempts > 0 else 0
        feedback += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        feedback += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{total_attempts}\n"
        feedback += f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%"

        await message.answer(feedback, reply_markup=practice_keyboard)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø—Ä–∞–∫—Ç–∏–∫–∏"
        await state.set_state(PracticeStates.practicing)

    except Exception as e:
        logger.error(f"Error processing response: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=practice_keyboard)
        await state.set_state(PracticeStates.practicing)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–æ–π
@router.message(PracticeStates.practicing, F.text == "üéØ –ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞")
async def handle_new_phrase(message: types.Message, state: FSMContext):
    await send_practice_phrase(message, state)


@router.message(PracticeStates.practicing, F.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
async def handle_repeat_phrase(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    current_phrase = state_data.get('current_phrase')
    if current_phrase:
        await message.answer(f"üîÅ *–ü–æ–≤—Ç–æ—Ä —Ñ—Ä–∞–∑—ã:*\n`{current_phrase}`")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∞:", reply_markup=response_keyboard)
        await state.set_state(PracticeStates.waiting_for_response)
    else:
        await send_practice_phrase(message, state)


@router.message(PracticeStates.practicing, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_statistics(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    correct_answers = state_data.get('correct_answers', 0)
    total_attempts = state_data.get('total_attempts', 0)
    accuracy = (correct_answers / total_attempts * 100) if total_attempts > 0 else 0
    stats_text = f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏:*\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{correct_answers}*\nüìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: *{total_attempts}*\nüéØ –¢–æ—á–Ω–æ—Å—Ç—å: *{accuracy:.1f}%*\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!"
    await message.answer(stats_text)


@router.message(F.text == "üö™ –í—ã—Ö–æ–¥")
@router.message(PracticeStates.practicing, F.text == "üö™ –í—ã—Ö–æ–¥")
async def handle_exit(message: types.Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏."""
    state_data = await state.get_data()
    correct_answers = state_data.get('correct_answers', 0)
    total_attempts = state_data.get('total_attempts', 0)
    goodbye_text = f"üëã *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏*\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{correct_answers}*\nüìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: *{total_attempts}*\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏!"
    await message.answer(goodbye_text, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


async def download_voice_message(file_id: str, user_id: int) -> Optional[Path]:
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram.
    """
    try:
        from aiogram import Bot
        from config import config
        import os
        from pathlib import Path

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∞—É–¥–∏–æ
        temp_dir = Path("temp_audio")
        temp_dir.mkdir(exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = Bot(token=config.BOT_TOKEN)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(file_id)
        file_path = file.file_path

        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        download_path = temp_dir / f"voice_{user_id}_{file_id}.ogg"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, destination=str(download_path))

        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {download_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
        if download_path.exists():
            await bot.session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            return download_path
        else:
            logger.error(f"–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {download_path}")
            await bot.session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {file_id}: {e}")
        return None


def register_practice_handlers(dp):
    dp.include_router(router)