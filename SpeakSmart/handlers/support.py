from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter

from services.faq_service import find_answer
from services.operator_service import notify_operator

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
support_router = Router()


@support_router.message(Command("support"))
async def cmd_support(message: Message):
    welcome_text = (
        "üí¨ *–†–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n"
        "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å. "
        "–ï—Å–ª–∏ —è –Ω–µ –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç, —Ç–æ –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –∂–∏–≤–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
    )
    await message.answer(welcome_text, parse_mode="Markdown")


@support_router.message(StateFilter(None), F.text)
async def handle_text_message(message: Message, bot):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_message = message.text

    # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ FAQ
    answer = find_answer(user_message)

    if answer:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(answer)
    else:
        # 2. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await notify_operator(bot, user_id, username, user_message)

        # 3. –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–µ—Ä–µ–¥–∞—á–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await message.answer(
            "‚ùì –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.\n"
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∂–∏–≤–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_support_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    dp.include_router(support_router)